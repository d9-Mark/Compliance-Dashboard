// scripts/test-cve-fetch.js
// Test what's actually being fetched from SentinelOne CVE API

import { config } from "dotenv";

config();

const SENTINELONE_ENDPOINT = process.env.SENTINELONE_ENDPOINT;
const SENTINELONE_API_KEY = process.env.SENTINELONE_API_KEY;

async function testCVEFetch() {
  console.log("üîç Testing CVE Fetch from SentinelOne\n");
  console.log("=".repeat(50));

  if (!SENTINELONE_ENDPOINT || !SENTINELONE_API_KEY) {
    console.error("‚ùå Missing SentinelOne configuration");
    return;
  }

  console.log(`üåê Endpoint: ${SENTINELONE_ENDPOINT}`);
  console.log(`üîë API Key: ${SENTINELONE_API_KEY.substring(0, 10)}...`);

  try {
    // Test 1: Get total count
    console.log("\nüìä Test 1: Getting total CVE count...");
    const countResponse = await fetch(
      `${SENTINELONE_ENDPOINT}/web/api/v2.1/application-management/risks?limit=1`,
      {
        headers: {
          Authorization: `ApiToken ${SENTINELONE_API_KEY}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      },
    );

    if (!countResponse.ok) {
      console.error(`‚ùå Count request failed: ${countResponse.status}`);
      const errorText = await countResponse.text();
      console.error("Error:", errorText);
      return;
    }

    const countData = await countResponse.json();
    console.log(
      `‚úÖ Total CVEs available: ${countData.pagination?.totalItems || 0}`,
    );
    console.log(
      "Count response structure:",
      JSON.stringify(countData, null, 2),
    );

    // Test 2: Get first page with more data
    console.log("\nüìÑ Test 2: Fetching first page (10 CVEs)...");
    const pageResponse = await fetch(
      `${SENTINELONE_ENDPOINT}/web/api/v2.1/application-management/risks?limit=10&sortby=id&sortorder=asc`,
      {
        headers: {
          Authorization: `ApiToken ${SENTINELONE_API_KEY}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      },
    );

    if (!pageResponse.ok) {
      console.error(`‚ùå Page request failed: ${pageResponse.status}`);
      const errorText = await pageResponse.text();
      console.error("Error:", errorText);
      return;
    }

    const pageData = await pageResponse.json();
    console.log(`‚úÖ Fetched ${pageData.data?.length || 0} CVEs`);

    if (pageData.data && pageData.data.length > 0) {
      console.log("\nüîç Sample CVE data structure:");
      console.log("First CVE:", JSON.stringify(pageData.data[0], null, 2));

      console.log("\nüìã CVE Summary:");
      pageData.data.forEach((cve, index) => {
        console.log(`${index + 1}. CVE: ${cve.cveId || "N/A"}`);
        console.log(
          `   Endpoint: ${cve.endpointId || "N/A"} (${cve.endpointName || "N/A"})`,
        );
        console.log(
          `   Application: ${cve.applicationName || "N/A"} v${cve.applicationVersion || "N/A"}`,
        );
        console.log(`   Severity: ${cve.severity || "N/A"}`);
        console.log(`   Status: ${cve.status || "N/A"}`);
        console.log();
      });

      // Test 3: Check for missing fields
      console.log("üîç Test 3: Checking for missing required fields...");
      const missingFields = [];

      pageData.data.forEach((cve, index) => {
        const required = ["cveId", "endpointId", "severity", "applicationName"];
        const missing = required.filter((field) => !cve[field]);
        if (missing.length > 0) {
          missingFields.push(`CVE ${index + 1}: missing ${missing.join(", ")}`);
        }
      });

      if (missingFields.length > 0) {
        console.log("‚ö†Ô∏è Found CVEs with missing required fields:");
        missingFields.forEach((msg) => console.log(`   ${msg}`));
      } else {
        console.log("‚úÖ All CVEs have required fields");
      }

      // Test 4: Check pagination
      console.log("\nüîç Test 4: Checking pagination...");
      console.log(
        `Pagination info:`,
        JSON.stringify(pageData.pagination, null, 2),
      );

      if (pageData.pagination?.nextCursor) {
        console.log("‚úÖ Pagination cursor available for next page");
      } else {
        console.log("‚ö†Ô∏è No pagination cursor - might be end of data");
      }
    } else {
      console.log("‚ùå No CVE data returned");
    }
  } catch (error) {
    console.error("üí• Test failed:", error.message);
    console.error("Stack:", error.stack);
  }
}

testCVEFetch().catch(console.error);
